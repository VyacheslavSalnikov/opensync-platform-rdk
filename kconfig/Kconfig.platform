menuconfig PLATFORM_IS_RDK
    bool "RDK"
    help
        Support for RDK-based platforms

if PLATFORM_IS_RDK

config RDK_LAN_BRIDGE_NAME
    string "LAN bridge name"
    default "br-home"
    help
        LAN bridge name that will be used

config RDK_WAN_BRIDGE_NAME
    string "WAN bridge name"
    default "br-wan"
    help
        WAN bridge name that will be used

config RDK_BHAUL_24_IFNAME
    string "Backhaul AP 2.4 GHz interface name"
    default "bhaul-ap-24"
    help
        Backhaul AP 2.4 GHz name that will be used

config RDK_BHAUL_50_IFNAME
    string "Backhaul AP 5 GHz interface name"
    default "bhaul-ap-50"
    help
        Backhaul AP 5 GHz name that will be used

config RDK_LAN_ETH_IFNAME
    string "LAN ethernet interface name"
    default "eth0"
    help
        Interface name on which ethernet clients
        are connected

config RDK_MOCA_IFNAME
    string "MOCA interface name"
    default "moca0"
    help
        MOCA interface name

config RDK_HEALTHCHECK_INTERVAL
    int "Radio and VIF states healthcheck interval in seconds"
    default "120"
    help
        The interval at which OpenSync will read Radio and VIF
        information to keep OVSDB state tables up-to-date.

config RDK_HAS_ASSOC_REQ_IES
    bool "The wifi_getAssociationReqIEs is implemented"
    help
        The wifi_getAssociationReqIEs() is a pending Wi-Fi HAL API.
        If implemented, then Band Steering Manager can request
        connected client's capabilities on demand.
        Otherwise it will depend only on capabilities delivered with
        a BS CONNECT event. If the event is missed for some reason,
        the band steering manager will not have all the information
        until the next CONNECT event.

config RDK_MULTI_PSK_SUPPORT
    bool "Multi-PSK support"
    default n
    help
        This enables Multi-PSK support.
        This feature depends on a set of new wifihal API functions:
        wifi_newApAssociatedDevice_callback2(),
        wifi_getApAssociatedDeviceDiagnosticResult4(),
        wifi_pushMultiPskKeys(),
        wifi_getMultiPskKeys()

menuconfig DEFAULT_OSYNC_HAL
    bool "OSync HAL defaults"
    help
        Select default OSync HAL implementations.

if DEFAULT_OSYNC_HAL

config OSYNC_HAL_USE_DEFAULT_INIT
    bool "osync_hal_init()"
    default n

config OSYNC_HAL_USE_DEFAULT_READY
    bool "osync_hal_ready()"
    default n

config OSYNC_HAL_USE_DEFAULT_DEINIT
    bool "osync_hal_deinit()"
    default n

config OSYNC_HAL_USE_DEFAULT_FETCH_CONNECTED_CLIENTS
    bool "osync_hal_fetch_connected_clients()"
    default n

config OSYNC_HAL_USE_DEFAULT_DEVINFO_GET_CLOUD_MODE
    bool "osync_hal_devinfo_get_cloud_mode()"
    default n

config OSYNC_HAL_USE_DEFAULT_DEVINFO_GET_REDIRECTOR_ADDR
    bool "osync_hal_devinfo_get_redirector_addr()"
    default n

config RDK_DHCP_LEASES_PATH
    string "DHCP leases path"
    default "/tmp/dnsmasq.leases"
    help
        DHCP leases path

config OSYNC_HAL_USE_DEFAULT_INET_SET_IFACE_CONFIG
    bool "osync_hal_inet_set_iface_config()"
    default n

config OSYNC_HAL_USE_DEFAULT_INET_CREATE_GRE
    bool "osync_hal_inet_create_gre()"
    default n

config OSYNC_HAL_USE_DEFAULT_INET_DESTROY_GRE
    bool "osync_hal_inet_destroy_gre()"
    default n

config OSYNC_HAL_USE_DEFAULT_INET_ADD_TO_BRIDGE
    bool "osync_hal_inet_add_to_bridge()"
    default n

config OSYNC_HAL_USE_DEFAULT_INET_CREATE_VLAN
    bool "osync_hal_inet_create_vlan()"
    default n

config OSYNC_HAL_USE_DEFAULT_INET_DESTROY_VLAN
    bool "osync_hal_inet_destroy_vlan()"
    default n

config OSYNC_HAL_USE_DEFAULT_GET_COUNTRY_CODE
    bool "osync_hal_get_country_code()"
    default n

endif

endif
